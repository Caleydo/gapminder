length(levels(metabolomics$HMDB_ID))
metabolomics <- read.delim("D:/w/cweb/plugins/pathfinder_metabolomics/data/metabolomics.csv")
View(metabolomics)
summary(metabolomics)
levels(metabolomics$KEGG_ID)
paste(levels(metabolomics$KEGG_ID),collapse = '","'
)
paste(levels(metabolomics$KEGG_ID),collapse = ','
)
paste(levels(metabolomics$KEGG_ID),collapse = "','")
replicate(30, rnorm(20))
r = replicate(30, rnorm(20))
View(r)
?rnorm
?runif
r = cbind('Row'+(1:300),replicate(30, runif(300, 0, 100))
)
r = cbind(paste('Row',(1:300)),replicate(30, runif(300, 0, 100))
)
View(r)
r = replicate(30, runif(300, 0, 100))
rownames(r) = paste('Row',1:300)
View(r)
write.table(r, 'bi_test.csv',row.names=T,quote=F)
write.table(r, 'bi_test.csv',row.names=T,quote=F,sep='\t')
indicator.gapminder.gdp_per_capita_ppp <- read.delim("D:/w/cweb/_data/gapminder_raw/indicator gapminder gdp_per_capita_ppp.txt", stringsAsFactors=FALSE)
View(indicator.gapminder.gdp_per_capita_ppp)
indicator.gapminder.population <- read.delim("D:/w/cweb/_data/gapminder_raw/indicator gapminder population.txt", stringsAsFactors=FALSE)
View(indicator.gapminder.population)
indicator.gapminder.under5mortality <- read.delim("D:/w/cweb/_data/gapminder_raw/indicator gapminder under5mortality.txt", dec=",", stringsAsFactors=FALSE)
View(indicator.gapminder.under5mortality)
indicator.gapminder.population$X1810
indicator.gapminder.population <- read.delim("D:/w/cweb/_data/gapminder_raw/indicator gapminder population.txt", dec=",", stringsAsFactors=FALSE)
View(indicator.gapminder.population)
View(indicator.gapminder.under5mortality)
View(indicator.gapminder.gdp_per_capita_ppp)
View(indicator.gapminder.under5mortality)
View(indicator.gapminder.population)
write.table('gdp.csv', indicator.gapminder.gdp_per_capita_ppp, quote=F, row.names=F)
write.table(indicator.gapminder.gdp_per_capita_ppp, 'gdp.csv', quote=F, row.names=F)
write.table(indicator.gapminder.population, 'population.csv', quote=F, row.names=F)
write.table(indicator.gapminder.under5mortality, 'mortality.csv', quote=F, row.names=F)
pop = indicator.gapminder.population
pop = pop[1:275,]
View(pop)
pop = indicator.gapminder.population[1:275,1:ncol(pop-10)]
pop = indicator.gapminder.population[1:275,1:ncol(pop)-10)]
pop = indicator.gapminder.population[1:275,1:ncol(pop)-10]
ncol(pop)
pop = indicator.gapminder.population[1:275,1:(ncol(pop)-10)]
View(pop)
write.table(pop, 'population.csv', quote=F, row.names=F)
?write.table
write.table(pop, 'population.csv', quote=F, row.names=F,na='')
mor = indicator.gapminder.under5mortality[1:275,]
View(mor[,ncol(mor-20):])
View(mor[,(ncol(mor-20):])
View(mor[,(ncol(mor-20):ncol(mor)])
View(mor[,(ncol(mor)-20):ncol(mor)])
mor = indicator.gapminder.under5mortality[1:275,1:(ncol(mor)-10)]
write.table(mor, 'mor.csv', quote=F, row.names=F,na='')
gdp = indicator.gapminder.gdp_per_capita_ppp[1:275, 1:(ncol(mor)-10)]
write.table(gdp, 'gdp.csv', quote=F, row.names=F,na='')
gdp = indicator.gapminder.gdp_per_capita_ppp[1:260,]
write.table(gdp, 'gdp.csv', quote=F, row.names=F,na='')
install.packages("gapminder")
library('gapminder')
indicator.gapminder.gdp_per_capita_ppp <- read.delim("D:/w/cweb/_data/gapminder_raw/indicator gapminder gdp_per_capita_ppp.txt", stringsAsFactors=FALSE)
View(indicator.gapminder.gdp_per_capita_ppp)
indicator.gapminder.population <- read.delim("D:/w/cweb/_data/gapminder_raw/indicator gapminder population.txt", stringsAsFactors=FALSE)
View(indicator.gapminder.population)
indicator.gapminder.under5mortality <- read.delim("D:/w/cweb/_data/gapminder_raw/indicator gapminder under5mortality.txt", dec=",", stringsAsFactors=FALSE)
View(indicator.gapminder.under5mortality)
gdp = indicator.gapminder.gdp_per_capita_ppp[1:260,]
write.table(gdp, 'gdp.csv', quote=F, row.names=F,na='',sep='\t')
mor = indicator.gapminder.under5mortality[1:275,1:(ncol(mor)-10)]
mor = indicator.gapminder.under5mortality[1:275,1:(ncol(indicator.gapminder.under5mortality)-10)]
write.table(mor, 'mor.csv', quote=F, row.names=F,na='',sep='\t')
pop = indicator.gapminder.population[1:275,1:(ncol(indicator.gapminder.population)-10)]
write.table(pop, 'population.csv', quote=F, row.names=F,sep='\t')
write.table(pop, 'population.csv', quote=F, row.names=F,sep='\t',na='')
summary(gdp)
min(gdp)
summary(as.vector(gdp)
summary(as.vector(gdp))
summary(as.vector(gdp))
typeof(gdp)
gg = as.matrix(gdp)
summary(gg)
gg = as.matrix(gdp[,1:])
gg = as.matrix(gdp[,1:ncol(gdp)])
summary(gg)
gg = as.matrix(gdp[,2:ncol(gdp)])
summary(gg)
summary(as.vector(gg)
()
()
summary(as.vector(gg))
summary(as.vector(as.matrix(pop[,2:ncol(pop)]))
)
1.376e+09
summary(as.vector(as.matrix(mor[,2:ncol(pop)]))
)
indicator.life_expectancy_at_birth <- read.delim("D:/w/cweb/_data/gapminder_raw/indicator life_expectancy_at_birth.txt", dec=",", stringsAsFactors=FALSE)
View(indicator.life_expectancy_at_birth)
indicator_gapminder_childdeaths <- read.delim("D:/w/cweb/_data/gapminder_raw/indicator_gapminder_childdeaths.txt", dec=",", stringsAsFactors=FALSE)
View(indicator_gapminder_childdeaths)
life = indicator.life_expectancy_at_birth
life = life[1:260,]
View(life)
View(life[,200:ncol(life)])
write.table(life, 'life.csv', quote=F, row.names=F,sep='\t',na='')
summary(as.vector(as.matrix(life[,2:ncol(life)]))
)
View(gdp)
View(indicator_gapminder_childdeaths)
child = indicator_gapminder_childdeaths
child = indicator_gapminder_childdeaths[1:260,]
View(child)
summary(as.vector(as.matrix(child[,2:ncol(child)])))
write.table(child, 'child.csv', quote=F, row.names=F,sep='\t',na='')
save.image("D:/w/cweb/_data/gapminder_raw/gapminder.RData")
gap <- read.delim("D:/Downloads/gapminder-unfiltered.tsv", stringsAsFactors=FALSE)
View(gap)
?unique
g = gap[unique(gap$country),]
View(g)
gap$country
unique(gap$country)
g = gap[-duplicated(gap$country),]
View(g)
g = gap[!duplicated(gap$country),]
View(g)
g = gap[!duplicated(gap$country),c(1,2)]
view(g)
view(g)
View(g)
View(gap)
country_continent <- read.delim("D:/Desktop/country_continent.txt")
View(country_continent)
write.table(country_continent[,1:2], 'continent.csv', quote=F, row.names=F,sep='\t',na='')
summry(country_continent)
summary(country_continent)
59+53+75+72
59+53+76+72
?runif
v = as.matrix(runif(10*10000),nrow=10000)
write.table(v,'v.csv', row.names=T)
write.table(v,'v.csv', row.names=T,quote=F)
row.names(v) = paste('Row',1:nrow(v))
write.table(v,'v.csv', row.names=T,quote=F)
?as.matrix
nrow(v)
ncol(v)
v = as.matrix(runif(10*10000),nrow=10000,ncol=10)
ncol(v)
v = matrix(runif(10*10000),ncol=10)
ncol(v)
nrow(v)
row.names(v) = paste('Row',1:nrow(v))
write.table(v,'v.csv', row.names=T,quote=F)
write.table(v,'v.csv', row.names=T,quote=F,sep='\t')
v = matrix(runif(10*50000),ncol=10)
row.names(v) = paste('Row',1:nrow(v))
write.table(v,'v50.csv', row.names=T,quote=F,sep='\t')
?paste0
source('D:/GoogleDrive/caleydo_projects/LineUp/LineUp Web/data/randomDataGenerator.R')
dumpRandomLineUpData('test',100,100)
dumpRandomLineUpData('test',100,100)
source('D:/GoogleDrive/caleydo_projects/LineUp/LineUp Web/data/randomDataGenerator.R')
dumpRandomLineUpData('test',100,100)
?write.table
source('~/.active-rstudio-document')
dumpRandomLineUpData('test',100,100)
source('D:/GoogleDrive/caleydo_projects/LineUp/LineUp Web/data/randomDataGenerator.R')
dumpRandomLineUpData('test',100,100)
?col.names
?row.names
source('D:/GoogleDrive/caleydo_projects/LineUp/LineUp Web/data/randomDataGenerator.R')
?row.names
dumpRandomLineUpData('test',100,100)
ncol=100
nrow=10
v = matrix(runif(ncol*nrow),ncol=ncol)
rownames(v) = paste('Row',1:nrow(v))
vv = cbind(rownames(v), v);
View(vv)
c('ID',colnames(v))
colnames(v)
colnames(vv) = c('ID',paste0('Attr',1:ncol(v)))
vv
source('D:/GoogleDrive/caleydo_projects/LineUp/LineUp Web/data/randomDataGenerator.R')
dumpRandomLineUpData('test',100,100)
data(anscombe)
example(anscombe)
View(anscombe)
write.csv('anscombe.csv', anscombe, row.names=F,quote=F)
write.csv(anscombe,'anscombe.csv', row.names=F,quote=F)
data(iris)
data(cars)
iris
cars
View(cars)
View(iris)
write.table(iris, 'iris.csv',rows.names=F,quote=F,sep='\t')
write.table(iris, 'iris.csv',row.names=F,quote=F,sep='\t')
write.csv(anscombe,'anscombe.csv', row.names=F,quote=F,sep='\t')
write.table(anscombe,'anscombe.csv', row.names=F,quote=F,sep='\t')
write.table(anscombe,'anscombe.csv', row.names=T,quote=F,sep='\t')
write.table(anscombe,'anscombe.csv', row.names=F,quote=F,col.names=NA,sep='\t')
write.table(anscombe,'anscombe.csv', row.names=T,quote=F,col.names=NA,sep='\t')
write.table(iris, 'iris.csv',row.names=T,col.names=NA,quote=F,sep='\t')
data(mtcars)
mtcars
View(mtcars)
write.table(mtcars, 'mtcars.csv',row.names=T,col.names=NA,quote=F,sep='\t')
totalPopulation <- read.csv("D:/w/cweb/plugins/gapminder/data/totalPopulation.csv")
View(totalPopulation)
continent <- read.csv("D:/w/cweb/plugins/gapminder/data/continent.csv")
View(continent)
summary(con)
summary(continent)
childmortality <- read.delim("D:/w/cweb/plugins/gapminder/data/childmortality.txt")
View(childmortality)
gdp <- read.delim("D:/w/cweb/plugins/gapminder/data/gdp.txt")
View(gdp)
lifeexpectancy <- read.delim("D:/w/cweb/plugins/gapminder/data/lifeexpectancy.txt")
View(lifeexpectancy)
totalPop_interpolated <- read.delim("D:/w/cweb/plugins/gapminder/data/totalPop_interpolated.txt")
View(totalPop_interpolated)
max(childmortality)
max(as.vector(childmortality))
max(as.matrix(childmortality))
max(childmortality[,2:])
max(childmortality[,2:ncol(childmortality)])
max(gdp[,2:ncol(gdp)])
View(gdp)
gdp <- read.delim("D:/w/cweb/plugins/gapminder/data/gdp.txt")
View(gdp)
max(gdp[,2:ncol(gdp)])
max(totalPop_interpolated[,2:ncol(totalPop_interpolated)])
gdp <- read.delim("D:/w/cweb/plugins/gapminder/data/gdp.txt")
View(gdp)
max(as.matrix(gdp))
max(as.matrix(gdp[,1:ncol(gdp)]))
max(as.matrix(gdp[,2:ncol(gdp)]))
max(as.matrix(gdp[,-1]))
childmortality <- read.delim("D:/w/cweb/plugins/gapminder/data/childmortality.txt")
View(childmortality)
verhaak_classification <- read.delim("D:/w/cweb/plugins/stratomex.js/data/verhaak_classification.txt")
View(verhaak_classification)
summary(verhaak_classification)
`840_genes_with_subtype` <- read.delim("D:/w/cweb/plugins/stratomex.js/data/840_genes_with_subtype.txt")
View(`840_genes_with_subtype`)
summary(`840_genes_with_subtype)
summary(`840_genes_with_subtype`)
summary(840_genes_with_subtype)
View(`840_genes_with_subtype`)
summary(`840_genes_with_subtype`)
microRNA.seq_data <- read.table("D:/w/caleydo/caleydo/org.caleydo.data/TCGA KIRC Package/microRNA-seq_data.csv", sep=";", quote="\"", stringsAsFactors=FALSE)
View(microRNA.seq_data)
summary(microRNA.seq_data)
summary(as.vector(as.matrix(microRNA.seq_data)))
Methylation_data <- read.table("D:/w/caleydo/caleydo/org.caleydo.data/TCGA KIRC Package/Methylation_data.csv", sep=";", quote="\"")
View(Methylation_data)
Methylation_raw <- read.delim("D:/w/caleydo/caleydo/org.caleydo.data/TCGA KIRC Package/Methylation_raw.csv", header=FALSE)
View(Methylation_raw)
summary(as.vector(Methylation_data))
summary(as.vector(as.matrix(Methylation_data)))
summary(as.vector(as.matrix(Methylation_raw)))
microRNA.seq_data <- read.table("D:/w/caleydo/caleydo/org.caleydo.data/TCGA KIRC Package/microRNA-seq_data.csv", sep=";", quote="\"")
View(microRNA.seq_data)
microRNA.seq_norm <- read.delim("D:/w/caleydo/caleydo/org.caleydo.data/TCGA KIRC Package/microRNA-seq_norm.csv", header=FALSE)
View(microRNA.seq_norm)
microRNA.seq_raw <- read.delim("D:/w/caleydo/caleydo/org.caleydo.data/TCGA KIRC Package/microRNA-seq_raw.csv", header=FALSE)
View(microRNA.seq_raw)
summary(as.vector(as.matrix(microRNA.seq_data)))
summary(as.vector(as.matrix(microRNA.seq_norm)))
summary(as.vector(as.matrix(microRNA.seq_raw)))
x.ta.analysis.csv <- read.csv("D:/Downloads/x-ta-analysis.csv.txt", sep=";")
View(x.ta.analysis.csv)
levels(x.ta.analysis.csv$PMID-RDR)
levels(x.ta.analysis.csv$PMID.CNSDR)
length(levels(x.ta.analysis.csv$PMID.CNSDR))
length(levels(x.ta.analysis.csv$PMID.RDR))
length(levels(x.ta.analysis.csv$PMID.Andedonia))
length(levels(x.ta.analysis.csv$PMID.CNSDR))
length(levels(x.ta.analysis.csv$PMID.CNSDR))
length(levels(x.ta.analysis.csv$PMID.CMDR))
nrow(x.ta.analysis.csv)
80/500
dumpRandomLineUpData = function(filename, nrow, ncol) {
v = matrix(runif(ncol*nrow),ncol=ncol)
rownames(v) = paste0('Row',1:nrow(v))
vv = cbind(rownames(v), v)
colnames(vv) = c('ID',paste0('Attr',1:ncol(v)))
write.table(vv,paste0(filename,'.csv'), row.names=F,quote=F,sep='\t')
}
dumpRandomLineUpData('test',2000,80)
?runif
dumpRandomLineUpData('test2k_80',2000,80)
dumpRandomLineUpData('test5k_80',5000,80)
dumpRandomLineUpData = function(filename, nrow, ncol) {
v = matrix(runif(ncol*nrow),ncol=ncol)
rownames(v) = paste0('Row',1:nrow(v))
vv = cbind(rownames(v), v)
colnames(vv) = c('ID',paste0('Attr',1:ncol(v)))
write.table(vv,paste0(filename,'.csv'), row.names=F,quote=F,sep='\t')
}
dumpRandomLineUpData(test_10k_80,10^5, 80)
dumpRandomLineUpData('test_10k_80',10*1000, 80)
dumpRandomLineUpData('test_20k_80',20*1000, 80)
32*1024*1024
data(mtcars)
mtcars
write.csv(mtcars,'mtcars.csv')
write.csv(mtcars,'mtcars.csv',quote=F, row.names=F)
write.csv(mtcars,'mtcars.csv',quote=F, row.names=T,col.names=NA)
?write.table
matrix(runif(2000),ncol=5)
a = matrix(runif(2000),ncol=5)
write.table(a, 'a.csv', sep='\t',row.names = T, col.names = NA, quote=F)
rownames(a) = paste('Row'+(1:nrow(a)))
rownames(a) = paste('Row',(1:nrow(a)))
write.table(a, 'a.csv', sep='\t',row.names = T, col.names = NA, quote=F)
tumor_010416_enc.xls <- read.delim("D:/Desktop/Daten/tumor_010416_enc.xls.txt", dec=",", stringsAsFactors=FALSE)
View(tumor_010416_enc.xls)
family_status = c('single', 'married', 'widowed', 'divorced', 'unknown', 'separated', 'registerd_partnership')
gender=c('male','female','unknown')
tumor_010416_enc.xls$family.status
is.na(tumor_010416_enc.xls$family.status)
tumor_010416_enc.xls[is.na(tumor_010416_enc.xls$family.status)] = 4
cbind(GeneSymbol=paste('Gene',1:1000))
?sample
sample(10)
sample(10, 100)
sample(10, 100, replace=T)
sample(c('a','b','c'), 100, replace=T)
sample(c('GeneCatA','GeneCatB','GeneCatC'), 1000, replace=T)
function randomCategory(ncats, prefix, size) {
cats = paste(prefix,1:ncats,sep=' ')
sample(cats, size, replace=T)
}
function randomScore(minV, maxV, size) {
runif(size, minV, maxV)
}
function names(prefix, size) {
paste(prefix,1:size,sep=' ')
}
source('~/.active-rstudio-document')
names('Test',100)
randomCategory(3,'Cat',100)
size = 1000
a = cbind(id=1:size, a_name = names('A',size),
a_cat1 = randomCategory(3, 'ACat', size) ,
a_cat2 = randomCategory(5, 'ACatB', size),
a_score1=randomScore(0,100, size),
a_score2=randomScore(-1,1, size)
)
View(a)
?cbind
?data.frame
a = data.frame(id=1:size, a_name = names('A',size),
a_cat1 = randomCategory(3, 'ACat', size) ,
a_cat2 = randomCategory(5, 'ACatB', size),
a_score1=randomScore(0,100, size),
a_score2=randomScore(-1,1, size)
)
View(a)
size_b = 100
b = data.frame(id=1:size_b, a_name = names('B',size_b),
a_cat1 = randomCategory(3, 'BCat', size_b) ,
a_cat2 = randomCategory(5, 'BCatB', size_b),
a_score1=randomScore(0,100, size_b),
a_score2=randomScore(-1,1, size_b)
)
size_ab = size * size_b
ab = data.frame(a_id=1:size, b_id = 1:size_b, ab_cat = randomCategory(3, 'ABCat', size_ab) ,
ab_score1=randomScore(0,100, size_ab),
ab_score2=randomScore(-1,1, size_ab)
)
View(b)
View(ab)
write.table(a, 'a.csv', sep=';', row.names=F)
write.table(b, 'b.csv', sep=';', row.names=F)
write.table(ab, 'ab.csv', sep=';', row.names=F)
View(a)
size = 1000
a = data.frame(id=1:size, a_name = names('A',size),
a_cat1 = randomCategory(3, 'ACat', size) ,
a_cat2 = randomCategory(5, 'ACatB', size),
a_int=randomInt(0,100, size),
a_real=randomScore(-1,1, size)
)
size_b = 100
b = data.frame(id=1:size_b, a_name = names('B',size_b),
a_cat1 = randomCategory(3, 'BCat', size_b) ,
a_cat2 = randomCategory(5, 'BCatB', size_b),
a_int=randomInt(0,100, size_b),
a_real=randomScore(-1,1, size_b)
)
size_ab = size * size_b
ab = data.frame(a_id=1:size, b_id = 1:size_b, ab_cat = randomCategory(3, 'ABCat', size_ab) ,
ab_int=randomInt(0,100, size_ab),
ab_real=randomScore(-1,1, size_ab)
)
write.table(a, 'a.csv', sep=';', row.names=F)
write.table(b, 'b.csv', sep=';', row.names=F)
write.table(ab, 'ab.csv', sep=';', row.names=F)
randomInt = function (minV, maxV, size) {
sample(minV:maxV, size, replace=T)
}
names = function (prefix, size) {
paste(prefix,1:size,sep=' ')
}
size = 1000
a = data.frame(id=1:size, a_name = names('A',size),
a_cat1 = randomCategory(3, 'ACat', size) ,
a_cat2 = randomCategory(5, 'ACatB', size),
a_int=randomInt(0,100, size),
a_real=randomScore(-1,1, size)
)
size_b = 100
b = data.frame(id=1:size_b, a_name = names('B',size_b),
a_cat1 = randomCategory(3, 'BCat', size_b) ,
a_cat2 = randomCategory(5, 'BCatB', size_b),
a_int=randomInt(0,100, size_b),
a_real=randomScore(-1,1, size_b)
)
size_ab = size * size_b
ab = data.frame(a_id=1:size, b_id = 1:size_b, ab_cat = randomCategory(3, 'ABCat', size_ab) ,
ab_int=randomInt(0,100, size_ab),
ab_real=randomScore(-1,1, size_ab)
)
write.table(a, 'a.csv', sep=';', row.names=F)
write.table(b, 'b.csv', sep=';', row.names=F)
write.table(ab, 'ab.csv', sep=';', row.names=F)
?repeat
?reß
?rep
rep(1:4, 3)
sorted(rep(1:4, 3))
sort(rep(1:4, 3))
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
View(ab)
source('~/.active-rstudio-document')
devtools::install_git
devtools::install_github("Caleydo/lineup_htmlwidget")
devtools::install_github("Caleydo/lineupjs_htmlwidget")
devtools::install_github("Caleydo/lineup_htmlwidget")
library(lineup)
lineup(mtcars)
redis_db_dump_id <- read.table("F:/w/targid_boehringer/_backup/redis_db_dump_id.txt", quote="'", stringsAsFactors=FALSE)
View(redis_db_dump_id)
a = redis_db_dump_id
colnames(a) = c('IDType', 'ID', 'UID')
View(redis_db_dump_id)
View(a)
a$IDType = factor(a$IDType)
levels(a$IDType)
for(idtype in levels(a$IDType)) {
write.table(ea[a$IDType == idtype, c(2,3)], paste(idtype,'.txt',sep=''), quote=F, sep='\t', row.names=F,col.names=F)
}
for(idtype in levels(a$IDType)) {
write.table(a[a$IDType == idtype, c(2,3)], paste(idtype,'.txt',sep=''), quote=F, sep='\t', row.names=F,col.names=F)
}
Ensembl2UniProt <- read.delim("F:\w\targid_boehringer\targid_redis_mapping\data\mappings\Ensembl2UniProt.txt", header=FALSE, quote="", na.strings=" -", stringsAsFactors=FALSE)
colnames(Ensembl2UniProt) = c("Ensembl", "UniProt")
Ensembl2UniProt = Ensembl2UniProt[!is.na(Ensembl2UniProt$UniProt),]
Ensembl2UniProt <- read.delim("F:\\w\\targid_boehringer\\targid_redis_mapping\\data\\mappings\\Ensembl2UniProt.txt", header=FALSE, quote="", na.strings=" -", stringsAsFactors=FALSE)
colnames(Ensembl2UniProt) = c("Ensembl", "UniProt")
Ensembl2UniProt = Ensembl2UniProt[!is.na(Ensembl2UniProt$UniProt),]
write.table(Ensembl2UniProt, 'Ensembl2UniProt.txt', quote=F, sep='\t', row.names=F,col.names=F)
setwd("F:/w/gapminder/gapminder/data/raw")
main_religion <- read.delim("F:/w/gapminder/gapminder/data/raw/main_religion.csv")
View(main_religion)
gdp_per_capita_ppp <- read.delim("F:/w/gapminder/gapminder/data/raw/gdp_per_capita_ppp.csv", stringsAsFactors=FALSE)
View(gdp_per_capita_ppp)
total_fertility <- read.delim("F:/w/gapminder/gapminder/data/raw/total_fertility.csv", stringsAsFactors=FALSE)
View(total_fertility)
total_fertility$X1800
typeof(total_fertility$X1800)
continent <- read.delim("F:/w/gapminder/gapminder/data/continent.txt")
View(continent)
View(main_religion)
countries= rownames(countries)
countries= rownames(continent)
countries
countries= continent$country
?match
countries %in% main_religion$Entity
match(countries, main_religion$Entity)
main_religion[match(countries, main_religion$Entity),]
religions = main_religion[match(countries, main_religion$Entity),]
View(religions)
write.table(religions, "../main_religions.txt", row.names=F, sep='\t', quote=F)
religions = gdp_per_capita_ppp[match(countries, gdp_per_capita_ppp$GDP.per.capita),]
View(religions)
fertility = total_fertility[match(countries, total_fertility$Total.fertility.rate),]
View(fertility)
colnames(fertility)
colnames(fertility) = c('fertility', 1800:2016)
colnames(fertility) = c('fertility', 1800:2015)
colnames(fertility)
write.table(fertility, "../fertility.txt", row.names=F, sep='\t', quote=F)
religions = main_religion[match(countries, main_religion$Entity),]
summary(religions$Group)
levels(religions$Group)
View(religions)
sumkmary(fertility)
summary(fertility)
